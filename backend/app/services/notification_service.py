import schedule
import time
import threading
import logging
from datetime import datetime
from app.repositories.reminder_repository import ReminderRepository

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–ª—É–∂–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö"""
    
    def __init__(self):
        self.is_running = False
        self.thread = None
        
    def check_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            current_time = datetime.now().strftime("%H:%M")
            current_day = datetime.now().weekday()
            
            reminders = ReminderRepository.get_all()
            active_reminders = []
            
            for reminder in reminders:
                if (reminder.time == current_time and 
                    current_day in reminder.days and 
                    reminder.is_active):
                    active_reminders.append(reminder)
            
            if active_reminders:
                self.send_notifications(active_reminders)
                
        except Exception as e:
            logger.error(f'Error checking reminders: {str(e)}')
    
    def send_notifications(self, reminders):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        for reminder in reminders:
            message = self.format_notification_message(reminder)
            self.send_notification(message, reminder)
    
    def format_notification_message(self, reminder):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        day_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        days_str = ', '.join([day_names[d] for d in reminder.days])
        
        return (f"üíä –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å {reminder.medication.name} - {reminder.medication.dosage}\n"
                f"‚è∞ –í—Ä–µ–º—è: {reminder.time}\n"
                f"üìÖ –î–Ω–∏: {days_str}")
    
    def send_notification(self, message, reminder):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        logger.info(f"NOTIFICATION: {message}")
        print(f"\nüîî –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {message}\n")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            logger.warning('Notification service is already running')
            return
        
        self.is_running = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule.every(1).minutes.do(self.check_reminders)
        
        def run_scheduler():
            logger.info('Notification scheduler started')
            while self.is_running:
                try:
                    schedule.run_pending()
                    time.sleep(1)
                except Exception as e:
                    logger.error(f'Error in scheduler loop: {str(e)}')
                    time.sleep(5)
        
        self.thread = threading.Thread(target=run_scheduler)
        self.thread.daemon = True
        self.thread.start()
        logger.info('Notification service started successfully')
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.is_running:
            return
    
        self.is_running = False
        schedule.clear()  # –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    
        if self.thread:
            self.thread.join(timeout=3)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ (–º–∞–∫—Å 3 —Å–µ–∫)
            print('üîî –°–ª—É–∂–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')